// Code generated by ogen, DO NOT EDIT.

package ogencl

import (
	"fmt"

	"github.com/go-faster/errors"
)

func (s *ErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

type APIClientInfoGetOK struct {
	Info    ClientInfo `json:"info"`
	Success bool       `json:"success"`
}

// GetInfo returns the value of Info.
func (s *APIClientInfoGetOK) GetInfo() ClientInfo {
	return s.Info
}

// GetSuccess returns the value of Success.
func (s *APIClientInfoGetOK) GetSuccess() bool {
	return s.Success
}

// SetInfo sets the value of Info.
func (s *APIClientInfoGetOK) SetInfo(val ClientInfo) {
	s.Info = val
}

// SetSuccess sets the value of Success.
func (s *APIClientInfoGetOK) SetSuccess(val bool) {
	s.Success = val
}

// Ref: #/components/schemas/ClientInfo
type ClientInfo struct {
	Login               string     `json:"login"`
	Balance             float64    `json:"balance"`
	Active              bool       `json:"active"`
	MonthLimitAmount    OptString  `json:"monthLimitAmount"`
	CurrentMonthAmount  OptFloat64 `json:"currentMonthAmount"`
	RestOfMonthLimit    OptFloat64 `json:"restOfMonthLimit"`
	Overdraft           OptFloat64 `json:"overdraft"`
	OverdraftExpiration OptInt64   `json:"overdraftExpiration"`
}

// GetLogin returns the value of Login.
func (s *ClientInfo) GetLogin() string {
	return s.Login
}

// GetBalance returns the value of Balance.
func (s *ClientInfo) GetBalance() float64 {
	return s.Balance
}

// GetActive returns the value of Active.
func (s *ClientInfo) GetActive() bool {
	return s.Active
}

// GetMonthLimitAmount returns the value of MonthLimitAmount.
func (s *ClientInfo) GetMonthLimitAmount() OptString {
	return s.MonthLimitAmount
}

// GetCurrentMonthAmount returns the value of CurrentMonthAmount.
func (s *ClientInfo) GetCurrentMonthAmount() OptFloat64 {
	return s.CurrentMonthAmount
}

// GetRestOfMonthLimit returns the value of RestOfMonthLimit.
func (s *ClientInfo) GetRestOfMonthLimit() OptFloat64 {
	return s.RestOfMonthLimit
}

// GetOverdraft returns the value of Overdraft.
func (s *ClientInfo) GetOverdraft() OptFloat64 {
	return s.Overdraft
}

// GetOverdraftExpiration returns the value of OverdraftExpiration.
func (s *ClientInfo) GetOverdraftExpiration() OptInt64 {
	return s.OverdraftExpiration
}

// SetLogin sets the value of Login.
func (s *ClientInfo) SetLogin(val string) {
	s.Login = val
}

// SetBalance sets the value of Balance.
func (s *ClientInfo) SetBalance(val float64) {
	s.Balance = val
}

// SetActive sets the value of Active.
func (s *ClientInfo) SetActive(val bool) {
	s.Active = val
}

// SetMonthLimitAmount sets the value of MonthLimitAmount.
func (s *ClientInfo) SetMonthLimitAmount(val OptString) {
	s.MonthLimitAmount = val
}

// SetCurrentMonthAmount sets the value of CurrentMonthAmount.
func (s *ClientInfo) SetCurrentMonthAmount(val OptFloat64) {
	s.CurrentMonthAmount = val
}

// SetRestOfMonthLimit sets the value of RestOfMonthLimit.
func (s *ClientInfo) SetRestOfMonthLimit(val OptFloat64) {
	s.RestOfMonthLimit = val
}

// SetOverdraft sets the value of Overdraft.
func (s *ClientInfo) SetOverdraft(val OptFloat64) {
	s.Overdraft = val
}

// SetOverdraftExpiration sets the value of OverdraftExpiration.
func (s *ClientInfo) SetOverdraftExpiration(val OptInt64) {
	s.OverdraftExpiration = val
}

type Error struct {
	ErrorMessage OptString `json:"error_message"`
	Ips          []string  `json:"ips"`
	Locale       OptString `json:"locale"`
	Success      OptBool   `json:"success"`
}

// GetErrorMessage returns the value of ErrorMessage.
func (s *Error) GetErrorMessage() OptString {
	return s.ErrorMessage
}

// GetIps returns the value of Ips.
func (s *Error) GetIps() []string {
	return s.Ips
}

// GetLocale returns the value of Locale.
func (s *Error) GetLocale() OptString {
	return s.Locale
}

// GetSuccess returns the value of Success.
func (s *Error) GetSuccess() OptBool {
	return s.Success
}

// SetErrorMessage sets the value of ErrorMessage.
func (s *Error) SetErrorMessage(val OptString) {
	s.ErrorMessage = val
}

// SetIps sets the value of Ips.
func (s *Error) SetIps(val []string) {
	s.Ips = val
}

// SetLocale sets the value of Locale.
func (s *Error) SetLocale(val OptString) {
	s.Locale = val
}

// SetSuccess sets the value of Success.
func (s *Error) SetSuccess(val OptBool) {
	s.Success = val
}

// ErrorStatusCode wraps Error with StatusCode.
type ErrorStatusCode struct {
	StatusCode int
	Response   Error
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorStatusCode) GetResponse() Error {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorStatusCode) SetResponse(val Error) {
	s.Response = val
}

// Ref: #/components/schemas/Item
type Item struct {
	UUID       OptString  `json:"uuid"`
	Status     OptStatus  `json:"status"`
	StatusTime OptInt     `json:"status_time"`
	To         OptString  `json:"to"`
	Text       OptString  `json:"text"`
	Price      OptFloat64 `json:"price"`
}

// GetUUID returns the value of UUID.
func (s *Item) GetUUID() OptString {
	return s.UUID
}

// GetStatus returns the value of Status.
func (s *Item) GetStatus() OptStatus {
	return s.Status
}

// GetStatusTime returns the value of StatusTime.
func (s *Item) GetStatusTime() OptInt {
	return s.StatusTime
}

// GetTo returns the value of To.
func (s *Item) GetTo() OptString {
	return s.To
}

// GetText returns the value of Text.
func (s *Item) GetText() OptString {
	return s.Text
}

// GetPrice returns the value of Price.
func (s *Item) GetPrice() OptFloat64 {
	return s.Price
}

// SetUUID sets the value of UUID.
func (s *Item) SetUUID(val OptString) {
	s.UUID = val
}

// SetStatus sets the value of Status.
func (s *Item) SetStatus(val OptStatus) {
	s.Status = val
}

// SetStatusTime sets the value of StatusTime.
func (s *Item) SetStatusTime(val OptInt) {
	s.StatusTime = val
}

// SetTo sets the value of To.
func (s *Item) SetTo(val OptString) {
	s.To = val
}

// SetText sets the value of Text.
func (s *Item) SetText(val OptString) {
	s.Text = val
}

// SetPrice sets the value of Price.
func (s *Item) SetPrice(val OptFloat64) {
	s.Price = val
}

type Login struct {
	APIKey string
}

// GetAPIKey returns the value of APIKey.
func (s *Login) GetAPIKey() string {
	return s.APIKey
}

// SetAPIKey sets the value of APIKey.
func (s *Login) SetAPIKey(val string) {
	s.APIKey = val
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFloat64 returns new OptFloat64 with value set to v.
func NewOptFloat64(v float64) OptFloat64 {
	return OptFloat64{
		Value: v,
		Set:   true,
	}
}

// OptFloat64 is optional float64.
type OptFloat64 struct {
	Value float64
	Set   bool
}

// IsSet returns true if OptFloat64 was set.
func (o OptFloat64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat64) Reset() {
	var v float64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat64) SetTo(v float64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat64) Get() (v float64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFloat64) Or(d float64) float64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt64 returns new OptInt64 with value set to v.
func NewOptInt64(v int64) OptInt64 {
	return OptInt64{
		Value: v,
		Set:   true,
	}
}

// OptInt64 is optional int64.
type OptInt64 struct {
	Value int64
	Set   bool
}

// IsSet returns true if OptInt64 was set.
func (o OptInt64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt64) Reset() {
	var v int64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt64) SetTo(v int64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt64) Get() (v int64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt64) Or(d int64) int64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStatus returns new OptStatus with value set to v.
func NewOptStatus(v Status) OptStatus {
	return OptStatus{
		Value: v,
		Set:   true,
	}
}

// OptStatus is optional Status.
type OptStatus struct {
	Value Status
	Set   bool
}

// IsSet returns true if OptStatus was set.
func (o OptStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStatus) Reset() {
	var v Status
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStatus) SetTo(v Status) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStatus) Get() (v Status, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStatus) Or(d Status) Status {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/Request
type Request struct {
	Route    Route     `json:"route"`
	To       string    `json:"to"`
	Text     OptString `json:"text"`
	Validity OptInt    `json:"validity"`
}

// GetRoute returns the value of Route.
func (s *Request) GetRoute() Route {
	return s.Route
}

// GetTo returns the value of To.
func (s *Request) GetTo() string {
	return s.To
}

// GetText returns the value of Text.
func (s *Request) GetText() OptString {
	return s.Text
}

// GetValidity returns the value of Validity.
func (s *Request) GetValidity() OptInt {
	return s.Validity
}

// SetRoute sets the value of Route.
func (s *Request) SetRoute(val Route) {
	s.Route = val
}

// SetTo sets the value of To.
func (s *Request) SetTo(val string) {
	s.To = val
}

// SetText sets the value of Text.
func (s *Request) SetText(val OptString) {
	s.Text = val
}

// SetValidity sets the value of Validity.
func (s *Request) SetValidity(val OptInt) {
	s.Validity = val
}

// Ref: #/components/schemas/Result
type Result struct {
	Items   []Item        `json:"items"`
	Errors  []ResultError `json:"errors"`
	Count   OptInt64      `json:"count"`
	Success OptBool       `json:"success"`
}

// GetItems returns the value of Items.
func (s *Result) GetItems() []Item {
	return s.Items
}

// GetErrors returns the value of Errors.
func (s *Result) GetErrors() []ResultError {
	return s.Errors
}

// GetCount returns the value of Count.
func (s *Result) GetCount() OptInt64 {
	return s.Count
}

// GetSuccess returns the value of Success.
func (s *Result) GetSuccess() OptBool {
	return s.Success
}

// SetItems sets the value of Items.
func (s *Result) SetItems(val []Item) {
	s.Items = val
}

// SetErrors sets the value of Errors.
func (s *Result) SetErrors(val []ResultError) {
	s.Errors = val
}

// SetCount sets the value of Count.
func (s *Result) SetCount(val OptInt64) {
	s.Count = val
}

// SetSuccess sets the value of Success.
func (s *Result) SetSuccess(val OptBool) {
	s.Success = val
}

// Ref: #/components/schemas/ResultError
type ResultError struct {
	To      OptString `json:"to"`
	Message OptString `json:"message"`
}

// GetTo returns the value of To.
func (s *ResultError) GetTo() OptString {
	return s.To
}

// GetMessage returns the value of Message.
func (s *ResultError) GetMessage() OptString {
	return s.Message
}

// SetTo sets the value of To.
func (s *ResultError) SetTo(val OptString) {
	s.To = val
}

// SetMessage sets the value of Message.
func (s *ResultError) SetMessage(val OptString) {
	s.Message = val
}

// Ref: #/components/schemas/Route
type Route string

const (
	RouteSMS    Route = "sms"
	RouteViber  Route = "viber"
	RouteVk     Route = "vk"
	RouteOk     Route = "ok"
	RouteVoice  Route = "voice"
	RouteFcall  Route = "fcall"
	RouteHlr    Route = "hlr"
	RoutePing   Route = "ping"
	RoutePushok Route = "pushok"
)

// AllValues returns all Route values.
func (Route) AllValues() []Route {
	return []Route{
		RouteSMS,
		RouteViber,
		RouteVk,
		RouteOk,
		RouteVoice,
		RouteFcall,
		RouteHlr,
		RoutePing,
		RoutePushok,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s Route) MarshalText() ([]byte, error) {
	switch s {
	case RouteSMS:
		return []byte(s), nil
	case RouteViber:
		return []byte(s), nil
	case RouteVk:
		return []byte(s), nil
	case RouteOk:
		return []byte(s), nil
	case RouteVoice:
		return []byte(s), nil
	case RouteFcall:
		return []byte(s), nil
	case RouteHlr:
		return []byte(s), nil
	case RoutePing:
		return []byte(s), nil
	case RoutePushok:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *Route) UnmarshalText(data []byte) error {
	switch Route(data) {
	case RouteSMS:
		*s = RouteSMS
		return nil
	case RouteViber:
		*s = RouteViber
		return nil
	case RouteVk:
		*s = RouteVk
		return nil
	case RouteOk:
		*s = RouteOk
		return nil
	case RouteVoice:
		*s = RouteVoice
		return nil
	case RouteFcall:
		*s = RouteFcall
		return nil
	case RouteHlr:
		*s = RouteHlr
		return nil
	case RoutePing:
		*s = RoutePing
		return nil
	case RoutePushok:
		*s = RoutePushok
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type Secret struct {
	APIKey string
}

// GetAPIKey returns the value of APIKey.
func (s *Secret) GetAPIKey() string {
	return s.APIKey
}

// SetAPIKey sets the value of APIKey.
func (s *Secret) SetAPIKey(val string) {
	s.APIKey = val
}

// Ref: #/components/schemas/Status
type Status string

const (
	StatusCreated       Status = "created"
	StatusModeration    Status = "moderation"
	StatusReject        Status = "reject"
	StatusDelivered     Status = "delivered"
	StatusRead          Status = "read"
	StatusReply         Status = "reply"
	StatusUndelivered   Status = "undelivered"
	StatusTimeout       Status = "timeout"
	StatusProgress      Status = "progress"
	StatusNoMoney       Status = "no_money"
	StatusDoubled       Status = "doubled"
	StatusLimitExceeded Status = "limit_exceeded"
	StatusBadNumber     Status = "bad_number"
	StatusStopList      Status = "stop_list"
	StatusRouteClosed   Status = "route_closed"
	StatusError         Status = "error"
)

// AllValues returns all Status values.
func (Status) AllValues() []Status {
	return []Status{
		StatusCreated,
		StatusModeration,
		StatusReject,
		StatusDelivered,
		StatusRead,
		StatusReply,
		StatusUndelivered,
		StatusTimeout,
		StatusProgress,
		StatusNoMoney,
		StatusDoubled,
		StatusLimitExceeded,
		StatusBadNumber,
		StatusStopList,
		StatusRouteClosed,
		StatusError,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s Status) MarshalText() ([]byte, error) {
	switch s {
	case StatusCreated:
		return []byte(s), nil
	case StatusModeration:
		return []byte(s), nil
	case StatusReject:
		return []byte(s), nil
	case StatusDelivered:
		return []byte(s), nil
	case StatusRead:
		return []byte(s), nil
	case StatusReply:
		return []byte(s), nil
	case StatusUndelivered:
		return []byte(s), nil
	case StatusTimeout:
		return []byte(s), nil
	case StatusProgress:
		return []byte(s), nil
	case StatusNoMoney:
		return []byte(s), nil
	case StatusDoubled:
		return []byte(s), nil
	case StatusLimitExceeded:
		return []byte(s), nil
	case StatusBadNumber:
		return []byte(s), nil
	case StatusStopList:
		return []byte(s), nil
	case StatusRouteClosed:
		return []byte(s), nil
	case StatusError:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *Status) UnmarshalText(data []byte) error {
	switch Status(data) {
	case StatusCreated:
		*s = StatusCreated
		return nil
	case StatusModeration:
		*s = StatusModeration
		return nil
	case StatusReject:
		*s = StatusReject
		return nil
	case StatusDelivered:
		*s = StatusDelivered
		return nil
	case StatusRead:
		*s = StatusRead
		return nil
	case StatusReply:
		*s = StatusReply
		return nil
	case StatusUndelivered:
		*s = StatusUndelivered
		return nil
	case StatusTimeout:
		*s = StatusTimeout
		return nil
	case StatusProgress:
		*s = StatusProgress
		return nil
	case StatusNoMoney:
		*s = StatusNoMoney
		return nil
	case StatusDoubled:
		*s = StatusDoubled
		return nil
	case StatusLimitExceeded:
		*s = StatusLimitExceeded
		return nil
	case StatusBadNumber:
		*s = StatusBadNumber
		return nil
	case StatusStopList:
		*s = StatusStopList
		return nil
	case StatusRouteClosed:
		*s = StatusRouteClosed
		return nil
	case StatusError:
		*s = StatusError
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}
